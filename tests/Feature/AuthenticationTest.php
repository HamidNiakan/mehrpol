<?php

namespace Tests\Feature;

use App\Enums\User\DeviceTypeEnums;
use App\Models\Subscription;
use App\Models\User;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Testing\Fluent\AssertableJson;
use Laravel\Sanctum\Sanctum;
use Tests\Feature\Concerns\TestingSubscription;
use Tests\Feature\Concerns\TestingUser;
use Tests\TestCase;

class AuthenticationTest extends TestCase
{
	use DatabaseMigrations;
	use TestingSubscription;
	use TestingUser;
    public $android;
    public $ios;

	protected function setUp (): void {
		parent::setUp(); // TODO: Change the autogenerated stub
		$this->withHeaders([
							   'Accept' => 'application/json'
						   ]);
        $this->android = $this->createSubscription(30);
        $this->ios = $this->createSubscription(60);

	}




	/**
     * A basic feature test example.
     */
    public function testSignUpUserAndroid(): void
    {
		$subscription = $this->android;
        $response = $this->post(route('api.signUp'),[
			'mobile' => '09178223037',
			'last_name' => 'test',
			'first_name' => 'test',
			'email' => 'h@gmail.com',
			'password' => '12345678',
			'device_type' => DeviceTypeEnums::Android->value
		]);
		$response
			->assertStatus(200)
			->assertJson(function (AssertableJson $json) {
				$json->where("message", null);
				$json->where("data.user.mobile", "09178223037");
				$json->where("data.user.last_name", "test");
				$json->where("data.user.first_name", "test");
				$json->where("data.user.email", "h@gmail.com");
				$json->where("data.user.device_type", DeviceTypeEnums::Android->value);
				$json->missing('data.user.password');

			});
		$this->assertAssigningSubscriptionToUser($response['data']['user']['user_subscriptions'],$subscription->id);
		$response = $this->postJson(route('api.signUp'), array(
			'mobile' => '09178223037',
			'password' => '12345'
		))
		 ->assertStatus(422)
		 ->assertJson(fn (AssertableJson $json) =>
		 $json->hasAll(["errors.mobile", "errors.last_name","errors.first_name", "errors.password"])->etc()
		 );

    }

	public function testSignUpUserIOS(): void
	{
		$subscription = $this->ios;
		$response = $this->post(route('api.signUp'),[
			'mobile' => '09178223037',
			'last_name' => 'test',
			'first_name' => 'test',
			'email' => 'h@gmail.com',
			'password' => '12345678',
			'device_type' => DeviceTypeEnums::IOS->value
		]);
		$response
			->assertStatus(200)
			->assertJson(function (AssertableJson $json) {
				$json->where("message", null);
				$json->where("data.user.mobile", "09178223037");
				$json->where("data.user.last_name", "test");
				$json->where("data.user.first_name", "test");
				$json->where("data.user.email", "h@gmail.com");
				$json->where("data.user.device_type", DeviceTypeEnums::IOS->value);
				$json->missing('data.user.password');

			});
		$this->assertAssigningSubscriptionToUser($response['data']['user']['user_subscriptions'],$subscription->id);
		$response = $this->postJson(route('api.signUp'), array(
			'mobile' => '09178223037',
			'password' => '12345'
		))
						 ->assertStatus(422)
						 ->assertJson(fn (AssertableJson $json) =>
						 $json->hasAll(["errors.mobile", "errors.last_name","errors.first_name", "errors.password"])->etc()
						 );

	}

	public function testSignIn(): void {

		$this->post(route('api.sign-in'),[
						'mobile' => null,
						'password' => null,
		])->assertStatus(422)
		->assertJson(fn (AssertableJson $json) =>
			$json->hasAll(["errors.mobile", "errors.password"])->etc()
		);

		$results = $this->createUserWithSubscription('09178223037','12345678',DeviceTypeEnums::Android->value,30);
		$user = $results[0];
		$subscription = $results[1];

		$this->post(route('api.sign-in'),[
				 'mobile' => '09178223038',
				 'password' => '12345676',
			 ])->assertStatus(401)
			->assertJson(function (AssertableJson $json) {
				$json->where("message", __('auth.These credentials do not match our records'));
				$json->where("data",[]);
			});

		$response = $this->post(route('api.sign-in'),[
				 'mobile' => '09178223037',
				 'password' => '12345678',
			 ])->assertStatus(200)
			 ->assertJson(function (AssertableJson $json) use ($user) {
				 $json->where("message", null);
				 $json->where("data.user.mobile", $user->mobile);
				 $json->where("data.user.last_name", $user->last_name);
				 $json->where("data.user.first_name", $user->first_name);
				 $json->where("data.user.email", $user->email);
				 $json->where("data.user.device_type", $user->device_type->value);
				 $json->missing('data.user.password');
			 });

		$this->assertAssigningSubscriptionToUser($response['data']['user']['user_subscriptions'],$subscription->id);

	}

	public function testUser() : void {
		$this->withHeaders(['Accept' => 'application/json'])
			 ->post(route('api.user'))->assertStatus(401)
			 ->assertJson(function (AssertableJson $json) {
				$json->where("message",'Unauthenticated.');
			});
		$user = User::factory()
					->setDeviceType(DeviceTypeEnums::Android->value)
					->setMobile('09178223037')
					->setPassword('12345678')
					->create();
		Sanctum::actingAs($user);
		$this->withHeaders(['Accept' => 'application/json'])
			 ->post(route('api.user'))->assertStatus(200)
			 ->assertJson(function (AssertableJson $json) use ($user) {
				 $json->where("message", null);
				 $json->where("data.user.mobile", $user->mobile);
				 $json->where("data.user.last_name", $user->last_name);
				 $json->where("data.user.first_name", $user->first_name);
				 $json->where("data.user.email", $user->email);
				 $json->where("data.user.device_type", $user->device_type->value);
				 $json->missing('data.user.password');
			 });

	}


	protected function assertAssigningSubscriptionToUser(array $array,$id) {
		$found = false;
		foreach ($array  as $item) {
			if ($item['subscription']['id'] == $id) {
				$found = true;
				break;
			}
		}
		$this->assertTrue($found);
	}





}
